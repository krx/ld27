package ld27;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.Robot;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import ld27.map.Map;
import ld27.map.Maps;
import ld27.map.XMLParser;
import ld27.menu.Words;
import ld27.player.Animation;
import ld27.player.Bullet;
import ld27.player.Player;
import ld27.player.types.GunDude;

@SuppressWarnings("serial")
public class GamePanel extends JPanel implements KeyListener, MouseListener, MouseMotionListener {
	public static enum Screen {
		PLAYER_CONFIG, GAMEPLAY;
	}
	//Sleep time between draw calls for 60fps
	private static final int FRAMERATE = 1000/60;
	//Data used for FPS calculations
	private double startTime = 0;
	private double deltaTime = 0;
	private double fps = 0;
	private int frames = 0;
	private int selectedCharacter = 0;
	private Color selectedColor = new Color(65, 255, 0);
	private Map map;
	public static Camera cam;
	Player player;
	public Screen screen = Screen.GAMEPLAY;
	private static final String gunDudePrefix = "/graphics/GunDude/";
	private Animation gunDude = new Animation(gunDudePrefix + "Idle/DudeWithGunPassive0.png",
			gunDudePrefix + "Idle/DudeWithGunPassive1.png", gunDudePrefix + "Idle/DudeWithGunPassive2.png",
			gunDudePrefix + "Idle/DudeWithGunPassive3.png");
	private static final String NinjaPrefix = "/graphics/Ninja/";
	private Animation ninja = new Animation(NinjaPrefix + "Idle/DudeWithSword0.png",
			NinjaPrefix + "Idle/DudeWithSword1.png", NinjaPrefix + "Idle/DudeWithSword2.png");
	private Animation[] characters = {gunDude, ninja, gunDude, ninja, gunDude, ninja, gunDude, ninja, gunDude, ninja};
	private int rows = 0, rc = 0;
	public static ArrayList<Bullet> bullets = new ArrayList<Bullet>();
	
	public GamePanel(){
		setPreferredSize(new Dimension(800,600));
		setFocusable(true);
		addKeyListener(this);
		addMouseListener(this);
		addMouseMotionListener(this);

		map = XMLParser.loadMap(Maps.Map3);
		player = new GunDude();
		cam = new Camera(800, 600, player);
		
		initTimer();
		
		
	}
	
	//COMMENTS ARE FOR SCRUBS
	public void tick(){
		requestFocus();
		//robot.mouseMove(cam.viewport.width/2, cam.viewport.height/2);
		cam.updatePosition();
		cam.viewport.x = -cam.offx;
		cam.viewport.y  = -cam.offy;
		if(cam.viewport.width != getWidth() || cam.viewport.height != getHeight()){
			cam.offx=0;
			cam.offy=0;
			cam.viewport.width = getWidth();
			cam.viewport.height = getHeight();
			System.out.println(cam.viewport.width + " " + cam.viewport.height);
		}
		player.tick();
	}
	
	public void paint(Graphics g){
		BufferedImage img = new BufferedImage(800, 600, BufferedImage.TYPE_INT_RGB);
		Graphics bg = img.getGraphics();
		bg.setColor(Color.WHITE);
		bg.fillRect(0, 0, 800, 600);
		switch (screen) {
			case PLAYER_CONFIG:
				bg.setColor(new Color(0x333333));
				bg.fillRect(0, 0, 800, 600);
				bg.setColor(new Color(0xCCCCCC));
				String title = "CHARACTER SELECTION";
				bg.drawImage(Words.menuWord(title, 790/title.length()-5, 80), 10, 10, null);
				int x = characters.length * 100;
				rc = 0;
				rows = 0;
				if (x < 800) {
					x = (600 - x) / 2;
					rc = characters.length;
					rows = 1;
				} else {
					x =  0;
					rc = 8;
					rows = (int) Math.ceil(characters.length * 1.0 / rc);
				}
				int y = (450 - rows) / 2 + 100;
				int sx = x;
				for (int i = 0; i < characters.length; i++) {
					if (i == selectedCharacter) {
						bg.setColor(new Color(0x111111));
						bg.drawRect(x, y, 100, 100);
						bg.drawRect(x + 15, y + 15, 70, 70);
						bg.setColor(selectedColor);
						bg.fillRect(x + 1, y + 1, 99, 14);
						bg.fillRect(x + 1, y + 1, 14, 99);
						bg.fillRect(x + 1, y + 86, 99, 14);
						bg.fillRect(x + 86, y + 1, 14, 99);
					}
					characters[i].paint(bg, x + 18, y + 18);
					x += 100;
					if ((i + 1) % rc == 0) {
						x = sx;
						y += 100;
					}
				}
				break;
			case GAMEPLAY:
				map.paint(bg, cam.offx, cam.offy, cam.viewport);
				player.paint(bg);
				break;
		}
		for(int i=0; i<bullets.size(); i++){
			bullets.get(i).paint(bg);
		}
		String framesPerSecond =  "" + (int)Math.round(fps) + "fps";
		int width = bg.getFontMetrics().stringWidth(framesPerSecond);
		bg.setColor(Color.BLACK);
		bg.fillRect(800-width-10, 0, width+10, bg.getFontMetrics().getHeight() + 5);
		bg.setColor(Color.WHITE);
		bg.drawString(framesPerSecond, 800-width-5, bg.getFontMetrics().getHeight());
		g.drawImage(img, 0, 0, getWidth(), getHeight(), 0, 0, 800, 600, null);
		calcFPS(); //Must be at end of method
	}
	
	/*
	 * Calculates game fps
	 * ^^WHAT HE SAID
	 */
	public void calcFPS() {
		frames++;
		if (startTime == 0) {
			startTime = System.currentTimeMillis();
		} else {
			double time = System.currentTimeMillis();
			deltaTime = time - startTime;
			if (deltaTime > 1000) {
				fps = (frames * 1000) / deltaTime;
				frames = 0;
				startTime = time;
			}
		}
	}

	//Point oldPos = new Point();
	public void mouseClicked(MouseEvent e) {}

	public void mouseEntered(MouseEvent e) {}

	public void mouseExited(MouseEvent e) {}

	public void mousePressed(MouseEvent e) {
		if(SwingUtilities.isLeftMouseButton(e)){
			player.keyController.resetAttackRate();
			player.keyController.setAttacking(true);
		}
		if(SwingUtilities.isRightMouseButton(e)){
			player.keyController.setCastingAbility(true);
		}
		//if(SwingUtilities.isMiddleMouseButton(e))
		//	oldPos = e.getPoint();
	}

	public void mouseReleased(MouseEvent e) {
		if(SwingUtilities.isLeftMouseButton(e)){
			player.keyController.setAttacking(false);
		}
		if(SwingUtilities.isRightMouseButton(e)){
			player.keyController.setCastingAbility(false);
		}
	}
	
	public void mouseDragged(MouseEvent e) {
		//if(SwingUtilities.isMiddleMouseButton(e)){
		//	int dx = e.getX()-oldPos.x;
		//	int dy = e.getY()-oldPos.y;
		//	cam.tryMove(dx, dy);
		//	oldPos = e.getPoint();
		//}
	}

	public void mouseMoved(MouseEvent e) {}

	public void keyPressed(KeyEvent e) {
		//Replace with the actual player object once we get to that point
		switch (screen) {
			case PLAYER_CONFIG:
				if (e.getKeyCode() == KeyEvent.VK_LEFT) {
					selectedCharacter--;
					selectedCharacter = Math.max(0, selectedCharacter);
				} else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
					selectedCharacter++;
					selectedCharacter = Math.min(characters.length - 1, selectedCharacter);
				} else if (e.getKeyCode() == KeyEvent.VK_UP && rows > 1 && selectedCharacter-rc > -1) {
					selectedCharacter -= rc;
				} else if (e.getKeyCode() == KeyEvent.VK_DOWN && rows > 1 && selectedCharacter+rc < characters.length) {
					selectedCharacter += rc;
				}
				break;
			case GAMEPLAY:
				if (player!=null)
					player.keyController.processKeyPressed(e);
				break;
		}
	}

	public void keyReleased(KeyEvent e) {
		switch (screen) {
		case PLAYER_CONFIG:
			break;
		case GAMEPLAY:
			if (player!=null)
				player.keyController.processKeyReleased(e);
			break;
	}
	}

	public void keyTyped(KeyEvent e) {
		//System.out.println(e.getKeyChar());
	}

	private void initTimer(){
		Timer t1 = new Timer();
		TimerTask tt1 = new TimerTask() {
			public void run() {
				tick();
			}
		};
		t1.schedule(tt1, 0, FRAMERATE);
	}
}