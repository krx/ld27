package ld27.player;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.EnumMap;

import kuusisto.tinysound.Sound;
import kuusisto.tinysound.TinySound;
import ld27.GamePanel;
import ld27.map.Map;
import ld27.map.Tile;

public class SuperBullet extends Animatable {

	public enum State {
		Flying,
		Exploding
	}
	protected EnumMap<State, Animation> anims = new EnumMap<State, Animation>(State.class);
	private static final String root = "/graphics/Bullet/Ability/";
	private boolean flipped;
	private Animation activeAnim;
	private int x;
	private int y;
	private Rectangle bounds;
	private final int MAX_VELOCITY = 10;
	private final static int DAMAGE = 75;
	private final static Sound laser = TinySound.loadSound(Bullet.class.getResource("/sounds/LaserAbility.wav"));
	private final static Sound laserHit = TinySound.loadSound(Bullet.class.getResource("/sounds/HitWithLaser.wav"));
	
	public SuperBullet(boolean flipped, int x, int y) {
		loadAnims();
		this.flipped = flipped;
		activeAnim.setFlipped(flipped);
		this.x=x;
		this.y=y;
		bounds = new Rectangle(0,4,32,24);
		laser.play();
	}
	
	public void loadAnims() {
		String[] flyPaths = {root+"Flying/GunDudeBulleAbilitytAnimation0.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation1.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation2.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation3.png"};
		
		String[] exploPaths = {root+"Exploding/GunDudeBulleAbilitytAnimationExplosion1.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion2.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion3.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion4.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion5.png",};
		Animation flying = new Animation(flyPaths);
		Animation explo = new Animation(exploPaths);
		anims.put(State.Flying, flying);
		anims.put(State.Exploding, explo);
		activeAnim = anims.get(State.Flying);
	}
	
	public void paint(Graphics g){
		
		if(!activeAnim.equals(anims.get(State.Exploding))){
			activeAnim.paint(g, x+GamePanel.cam.offx, y+GamePanel.cam.offy);
			x+= flipped ? -MAX_VELOCITY : MAX_VELOCITY;
			checkFutureLocation(x, y);
		} else {
			if(activeAnim.getCurrentFrame() == activeAnim.getLength()-1)
				GamePanel.bullets.remove(this);
			activeAnim.paint(g, x+GamePanel.cam.offx-128, y+GamePanel.cam.offy-128);
		}
		
	}
	
	private void explode(){
		activeAnim = anims.get(State.Exploding);
		bounds = new Rectangle(x-128,y-128,256,256);
		//TODO: hurt any players intersecting this rectangle
		for(int i=0; i<GamePanel.enemies.size(); i++){
			int px = GamePanel.enemies.get(i).playerX;
			int py = GamePanel.enemies.get(i).playerY;
			Rectangle pBounds = new Rectangle(px, py, 64, 64);
			if(pBounds.intersects(bounds)){
				GamePanel.enemies.get(i).damage(DAMAGE);
			}
		}
	}
	
	public void checkFutureLocation(int x, int y){
		Tile[][] map = Map.getMapData()[0];
		Rectangle futureBox = new Rectangle(x+bounds.x, y+bounds.x, bounds.width, bounds.height);
		for (int i = 0; i < Map.getWidth(); i++ ){
			for (int j = 0; j < Map.getHeight(); j++){
				if (map[j][i].getBounds().intersects(futureBox)){
					explode();
					return;
				}
			}
		}
		for(int i=0; i<GamePanel.enemies.size(); i++){
			int px = GamePanel.enemies.get(i).playerX;
			int py = GamePanel.enemies.get(i).playerY;
			Rectangle pBounds = new Rectangle(px, py, 64, 64);
			if(pBounds.intersects(futureBox)){
				//GamePanel.enemies.get(i).damage(DAMAGE);
				laserHit.play();
				explode();
				return;
			}
		}
	}
}