package ld27;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import javax.imageio.ImageIO;

import ld27.map.Map;
import ld27.map.Tile;
import ld27.util.FileIOHelper;

/**
 * Class to hold player information
 * @author RedSoxFan
 */
public class Player  {
	public Color c = new Color((float) Math.random(), (float) Math.random(), (float) Math.random());
	public Socket sock;
	public PrintWriter writer;
	public BufferedReader reader;
	
	public PlayerController keyController;
	BufferedImage playerImage;
	Tile[][]   map;
	
	public int playerX = 64, playerY = 127, playerXVel = 5;
	
	/**
	 * Create a standalone player
	 */
	public Player() {
		//this("", 0);
	    keyController = new PlayerController();
		 //Here for testing purposes
		 try {
		playerImage = ImageIO.read(FileIOHelper.loadResource("/graphics/DudeWithGun0.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		map = Map.getMapData()[0];
	}
	
	public void paint(Graphics g){
		g.drawImage(playerImage,playerX+GamePanel.cam.offx,playerY+GamePanel.cam.offy,null);
		
	}
	
	public void tick(){
		movePlayer();
		
	}
	
	public void movePlayer(){
		if (keyController.movingLeft){
			if (checkFutureLocation(playerX-playerXVel, playerY))
				playerX-=playerXVel;
		}
		if (keyController.movingRight)
			if (checkFutureLocation(playerX+playerXVel, playerY))
				playerX+=playerXVel;
	}
	
	public boolean checkFutureLocation(int playerX, int playerY){
		Rectangle futurePlayerBox = new Rectangle(playerX, playerY, 64, 64);
		boolean canMove = true;
		for (int i = 0; i < Map.getWidth(); i++ ){
			for (int j = 0; j < Map.getHeight(); j++){
				if (map[j][i].getBounds().intersects(futurePlayerBox)){
					canMove = false;
					break;
				}
			}
		}
		return canMove;
	}
	
	
	
	/**
	 * Connect player to a server
	 * @param server - IP Address or Domain Name
	 * @param port - Port the server is listening on
	 */
//	public Player(String server, int port) {
//		if (!server.trim().isEmpty()) {
//			try {
//				System.out.println(c.hashCode());
//				sock = new Socket(server, port);
//				reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
//				writer = new PrintWriter(sock.getOutputStream());
//				writer.println("[Ld1bTt]");
//				writer.flush();
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//		}
//	}
	/**
	 * Create a player - should only be used for remote players
	 * @param s - Socket for remote player
	 * @return Remote player object
	 */
//	public static Player createPlayer(Socket s) {
//		Player p = new Player();
//		p.sock = s;
//		return p;
//	}
}
