package ld27.player;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.EnumMap;

import ld27.GamePanel;
import ld27.map.Map;
import ld27.map.Tile;

public class SuperBullet extends Animatable {

	public enum State {
		Flying,
		Exploding
	}
	public enum Hit{
		Wall,
		Player,
		None
	}
	protected EnumMap<State, Animation> anims = new EnumMap<State, Animation>(State.class);
	private static final String root = "/graphics/Bullet/Ability/";
	private boolean flipped;
	private Animation activeAnim;
	private int x;
	private int y;
	private Rectangle bounds;
	private final int MAX_VELOCITY = 10;
	
	public SuperBullet(boolean flipped, int x, int y) {
		loadAnims();
		this.flipped = flipped;
		activeAnim.setFlipped(flipped);
		this.x=x;
		this.y=y;
		bounds = new Rectangle(0,4,32,24);
	}
	
	public void loadAnims() {
		String[] flyPaths = {root+"Flying/GunDudeBulleAbilitytAnimation0.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation1.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation2.png",
							 root+"Flying/GunDudeBulleAbilitytAnimation3.png"};
		
		String[] exploPaths = {root+"Exploding/GunDudeBulleAbilitytAnimationExplosion1.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion2.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion3.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion4.png",
							   root+"Exploding/GunDudeBulleAbilitytAnimationExplosion5.png",};
		Animation flying = new Animation(flyPaths);
		Animation explo = new Animation(exploPaths);
		anims.put(State.Flying, flying);
		anims.put(State.Exploding, explo);
		activeAnim = anims.get(State.Flying);
	}
	
	public void paint(Graphics g){
		
		if(!activeAnim.equals(anims.get(State.Exploding))){
			activeAnim.paint(g, x+GamePanel.cam.offx, y+GamePanel.cam.offy);
			x+= flipped ? -MAX_VELOCITY : MAX_VELOCITY;
			switch(checkFutureLocation(x, y)){
				case Wall:
				case Player: explode(); break;
				case None:
				default: break;
			}
		} else {
			if(activeAnim.getCurrentFrame() == activeAnim.getLength()-1)
				GamePanel.bullets.remove(this);
			activeAnim.paint(g, x+GamePanel.cam.offx-128, y+GamePanel.cam.offy-128);
		}
		
	}
	
	private void explode(){
		activeAnim = anims.get(State.Exploding);
		bounds = new Rectangle(x-128,y-128,256,256);
		//TODO: hurt any players intersecting this rectangle
	}
	
	public Hit checkFutureLocation(int x, int y){
		Tile[][] map = Map.getMapData()[0];
		Rectangle futureBox = new Rectangle(x+bounds.x, y+bounds.x, bounds.width, bounds.height);
		for (int i = 0; i < Map.getWidth(); i++ ){
			for (int j = 0; j < Map.getHeight(); j++){
				if (map[j][i].getBounds().intersects(futureBox)){
					return Hit.Wall;
				}
			}
		}
		//TODO: add for(;;) loop to check through all enemy players, return Hit.Player if one is hit
		return Hit.None;
	}
}