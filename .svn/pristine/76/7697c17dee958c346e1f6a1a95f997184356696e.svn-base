package ld27.player;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.EnumMap;
import java.util.HashMap;

import kuusisto.tinysound.Sound;
import kuusisto.tinysound.TinySound;

import ld27.GamePanel;
import ld27.map.Map;
import ld27.map.Tile;
import ld27.ui.InGameUI;
import ld27.util.FileIOHelper;

/**
 * Class to hold player information
 * @author RedSoxFan
 */
public abstract class Player extends Animatable {
	public enum State {
		Idle,
		Walking,
		Attacking
	}
	public Color c = new Color((float) Math.random(), (float) Math.random(), (float) Math.random());
	public Socket sock;
	public PrintWriter writer;
	public BufferedReader reader;
	protected EnumMap<State, Animation> anims = new EnumMap<State, Animation>(State.class);
	public final long TEN_SECONDS = 10000;
	public long abilityStartTime = -10000;
	
	public abstract void attack();
	public abstract void ability();
	
	public PlayerController keyController;

	public InGameUI userInterface = null;
	BufferedImage playerImage;

	Tile[][]   map;
	
	public boolean beginOfFall = true, isJumping = false;
	public int fallTicks = 0;
	public int playerX = 64, playerY = 127, playerXVel = 5, gravity = 2, acceleration = 1, jumpVel = -18;
	public int health, maxHealth;
	private Color bodyColor;
	public boolean respawning = false;
	private long respawnStartTime = -10000;
	public boolean leftTeam;
	private static Sound fallSound = TinySound.loadSound(Player.class.getResource("/sounds/Falling.wav"));

	/**
	 * Create a standalone player
	 */
	public Player(int maxHealth, Color col, boolean leftTeam) {
		this.maxHealth = maxHealth;
		this.health = maxHealth;
	    keyController = new PlayerController();
	    userInterface = new InGameUI(this);
		map = Map.getMapData()[0];
		bodyColor = col;
		this.leftTeam = leftTeam;
	}
	
	public void damage(int dmg){
		health -= dmg;
		if(health<=0){
			health = 0;
			playerX=GamePanel.enemies.contains(this) ? -100 : -64;
			playerY= 1300;
			respawning = true;
			respawnStartTime = System.currentTimeMillis();
		}
	}
	
	public void heal(int amount){
		health += amount;
		if(health>=maxHealth){
			health = maxHealth;
		}
	}
	
	public Player(int maxHealth, int x, int y, Color col, boolean leftTeam) {
		this(maxHealth, col, leftTeam);
		playerX = x;
		playerY = y;
	}
	
	public void paint(Graphics g){
		if(!respawning){
			if(!keyController.isMovingLeft() && !keyController.isMovingRight()){
				activeAnim = anims.get(State.Idle);
			} else {
				activeAnim = anims.get(State.Idle);//Change to State.Walking if separate anim is made
			}
			if(keyController.isAttacking())
				activeAnim = anims.get(State.Attacking);
			if(GamePanel.player != null && !GamePanel.player.equals(this)){
				drawHealthBar(g);
			}
			if(new Rectangle(playerX, playerY, 64, 64).intersects(GamePanel.cam.viewport)){
				activeAnim.setFlipped((keyController.isLastMovingLeft() && !keyController.isMovingRight()) || keyController.isMovingLeft());
				HashMap<Color, Color> replace = new HashMap<Color, Color>();
				replace.put(new Color(65, 255, 0), bodyColor);
				activeAnim.paint(g,playerX+GamePanel.cam.offx,playerY+GamePanel.cam.offy, replace);
			}
			tick();
		} else {
			if(System.currentTimeMillis() - respawnStartTime >= TEN_SECONDS){
				respawning = false;
				health = maxHealth;
				playerX = GamePanel.enemies.contains(this) ? 4900 : 220;
				playerY = 1300;
			}
		}
	}
	
	private void drawHealthBar(Graphics g){
		int x = playerX+GamePanel.cam.offx, y=playerY+GamePanel.cam.offy;
		g.setColor(Color.RED);
		g.fillRect(x, y, 64, 5);
		double ratio = (double)health/(double)maxHealth;
		g.setColor(Color.GREEN);
		g.fillRect(x, y, (int)(64.0*ratio), 5);
	}
	
	public void tick(){
		movePlayer();
		if (!isJumping)checkGravity();
		jumpFuckaJump();
		if(keyController.isAttacking() && keyController.canAttack()){
			attack();
		}
		if(keyController.isCastingAbility() && canCastAbility()){
			userInterface.cooldownAbility();
			ability();
		}
	}
	
	private boolean canCastAbility() {
		if(System.currentTimeMillis() - abilityStartTime >= TEN_SECONDS){
			abilityStartTime = System.currentTimeMillis();
			return true;
		}
		return false;
	}
	public void movePlayer(){
		if (keyController.movingLeft){
			activeAnim.setFlipped(true);
			if (checkFutureLocation(playerX-playerXVel, playerY))
				playerX-=playerXVel;
		}
		if (keyController.movingRight){
			activeAnim.setFlipped(false);
			if (checkFutureLocation(playerX+playerXVel, playerY))
				playerX+=playerXVel;
		}
		if ((keyController.jumpKey) && !checkFutureLocation(playerX, playerY+2)){
			if (!isJumping){
				isJumping = true;
				jumpVel = -20;
				keyController.jumpKey = false;
			}
		}
	}
	
	public void checkGravity(){
		if (checkFutureLocation(playerX, playerY+2)){
			if (beginOfFall){
				playerY+=gravity;
				fallTicks++;
				beginOfFall = false;
			} else {
				fallTicks++;
				if (checkFutureLocation(playerX, playerY+ gravity+fallTicks ))
					playerY+= gravity+fallTicks;
				else playerY += (gravity+fallTicks) - grabDistanceToPrecision(playerX, playerY+ gravity + fallTicks);
			}
		} else {
			if (!beginOfFall){
				beginOfFall = true;
				//fallSound.play();
			}
			fallTicks = 0;
		}
	}
	
	public void jumpFuckaJump(){
		if (isJumping) {
			if (checkFutureLocation(playerX, playerY + jumpVel)){
				playerY+=jumpVel;
				jumpVel++;
			} else {
				jumpVel = 0;
				isJumping = false;
				keyController.jumpKey = false;
			}
					
		}
	}
	public boolean checkFutureLocation(int playerX, int playerY){
		Rectangle futurePlayerBox = new Rectangle(playerX, playerY, 64, 64);
		boolean canMove = true;
		for (int i = 0; i < Map.getWidth(); i++ ){
			for (int j = 0; j < Map.getHeight(); j++){
				if (map[j][i].getBounds().intersects(futurePlayerBox)){
					canMove = false;
					break;
				}
			}
		}
		return canMove;
	}
	public int grabDistanceToPrecision(int playerX, int playerY){
		Rectangle futurePlayerBox = new Rectangle(playerX, playerY, 64, 64);
		for (int i = 0; i < Map.getWidth(); i++ ){
			for (int j = 0; j < Map.getHeight(); j++){
				if (map[j][i].getBounds().intersects(futurePlayerBox)){
					return map[j][i].getBounds().intersection(futurePlayerBox).height;
				}
			}
		}
		return 0;
	}
	
	
	
	/**
	 * Connect player to a server
	 * @param server - IP Address or Domain Name
	 * @param port - Port the server is listening on
	 */
//	public Player(String server, int port) {
//		if (!server.trim().isEmpty()) {
//			try {
//				System.out.println(c.hashCode());
//				sock = new Socket(server, port);
//				reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
//				writer = new PrintWriter(sock.getOutputStream());
//				writer.println("[Ld1bTt]");
//				writer.flush();
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//		}
//	}
	/**
	 * Create a player - should only be used for remote players
	 * @param s - Socket for remote player
	 * @return Remote player object
	 */
//	public static Player createPlayer(Socket s) {
//		Player p = new Player();
//		p.sock = s;
//		return p;
//	}
}
